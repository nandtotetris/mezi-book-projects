// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {

    static int ZERO, NINE, HYPHEN;
    field int length, actualLength;
    field Array charArray;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        let ZERO = 48;
        let NINE = 57;
        let HYPHEN = 45;
        let length = maxLength;
        let actualLength = 0;
        if (maxLength > 0) {
            let charArray = Array.new(maxLength);
        }
        return this;
    }

    /** De-allocates the charArray and frees its space. */
    method void dispose() {
        if (length > 0) {
            do charArray.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this String. */
    method int length() {
        return actualLength;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
        return charArray[j];
    }

    /** Sets the j'th character of this charArray to be c. */
    method void setCharAt(int j, char c) {
        let charArray[j] = c;
        return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this charArray as the return value. */
    method String appendChar(char c) {
        let charArray[actualLength] = c;
        let actualLength = actualLength + 1;
        return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
        let actualLength = actualLength - 1;
        return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
        var int i, value, currentChar;
        var boolean loop, isDigit, isNegative;
        let i = 0;
        let value = 0;
        // distinguish negative numbers
        if (charArray[0] = HYPHEN) {
            let isNegative = true;
            let i = i + 1;
        } else {
            let isNegative = false;
        }
        let loop = true;
        while (loop) {
            let currentChar = charArray[i];
            // digit characters are between 47 and 58
            let isDigit = (currentChar > (ZERO - 1)) & (currentChar < (NINE + 1));
            if (isDigit) {
                // remeber currentChar is an ascii code
                let value = value * 10 + (currentChar - ZERO);
                // increment i
                let i = i + 1;
                // loop only upto length
                if (i = actualLength) {
                    let loop = false;
                }                
            } else {
                let loop = false;
            }
 
        }
        if (isNegative) {
            let value = -value;
        } 
        return value;
        
    }

    method void setPositiveInt(int number) {
        var int lastDigit, quotient, lastChar;
        let quotient = number / 10;
        let lastDigit = number - (10 * quotient);
        let lastChar = ZERO + lastDigit;
        if (number < 10) {
            do appendChar(lastChar);
        } else {
            do setPositiveInt(quotient);
            do appendChar(lastChar);
        }
        return;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
        let actualLength = 0;
        // handle negative numbers
        if (number < 0) {
            // put in the - symbol
            do appendChar(HYPHEN);
            // take the absolute value of the number
            let number = Math.abs(number);
        }        
        do setPositiveInt(number);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
